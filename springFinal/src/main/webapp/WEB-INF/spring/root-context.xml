<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
			<!--
	 이 설정파일에서 사용할 수 있도록 properties를 불러오는 설정 
	 불러온 데이터는 다음과 같이 사용
	 ${이름}
	 -->
	 <context:property-placeholder location="classpath:/property/*.properties"/>
					<!-- 
		필터는 Dispatcherservlet과 동일한 시점에 생겨야 하므로 
		전역 설정파일(root-context.xml)에 생성
	 -->
		<bean id="loginFilter" class="com.kh.springFinal.Filter.LoginFilter"></bean>
		
		<!-- 
		데이터베이스 도구를 등록
		- 연결 도구 : 
			org.springframework.jdbc.datasource.DriverManagerDataSource
			org.apache.commons.dbcp2.BasicDataSource
		- 명령 도구
			org.springframework.jdbc.core.JdbcTemplate
	 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>
	
	<bean id="dbcpSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.username}"></property>
		<property name="password" value="${database.password}"></property>
		
		<property name="maxTotal" value="${database.max-total}"></property>
		<property name="maxIdle" value="${database.max-idle}"></property>
		<property name="maxWaitMillis" value="${database.max-wait}"></property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<!-- DI(Dependency Injection) : 필요한 도구를 주입시키는 것 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 
		myBatis를 이용하기 위한 도구 등록
		- sqlSessionTemplate : 구문 실행을 위한 템플릿을 제공하는 도구
		- sqlSession : 실제로 SQL 구문을 실행시키는 도구
	 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 연결을 위한 도구를 참조 설정 -->
		<property name="dataSource" ref="dbcpSource"></property>
		<!-- myBatis 설정파일의 위치를 설정 -->
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
       <!-- 실제 실행할 명령 파일 위치를 설정  -->
       <property name="mapperLocations" value="classpath:/mybatis/**/*-mapper.xml"></property>     
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSession"></constructor-arg>
	</bean>
	
	<!-- 
		이메일 전송 도구를 등록
	 --> 			
	 <bean id="sender" class="org.springframework.mail.javamail.JavaMailSenderImpl" >
	 	<property name="host" value="${email.host}"></property>
	 	<property name="port" value="${email.port}"></property>
	 	<property name="username" value="${email.username}"></property>
	 	<property name="password" value="${email.password}"></property>
	 	
	 	<property name="javaMailProperties">
	 		<props>
	 			<prop key="mail.smtp.auth">true</prop>
	 			<prop key="mail.smtp.starttls.enable">true</prop>
	 		</props>
	 	</property>
	 </bean>
	 <!-- 
	 	@Service,@Repository를 스캔하는 설정
	 	- use-default-filter : 기본적인 스캔을 하지 못하도록 설정(false)
	  -->
	  <context:component-scan base-package="com.kh.springFinal" use-default-filters="false">
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	  </context:component-scan>
	  
	 <!-- 
	 	스케줄러 사용 설정 
	 -->		
	 <task:annotation-driven/>
	 
	 <!-- 
	 	트랜잭션 사용 설정
	 	- @Transactional 어노테이션 활성화
	 	- 실제 트랜잭션 관리를 수행할 도구를 등록
	 	- org.springframework.jdbc.datasource.DataSourceTransactionManager
	  -->
	  
	  <tx:annotation-driven/>
	  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  	<property name="dataSource" ref="dbcpSource"></property>
	  </bean>
	  
	  <!-- 
	  	AOP 관련 설정
	  	- @Aspect 과 그 하위 어노테이션을 활성화
	   -->
	   <aop:aspectj-autoproxy/>
</beans>

